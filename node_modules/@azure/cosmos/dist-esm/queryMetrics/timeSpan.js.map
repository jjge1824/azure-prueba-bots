{"version":3,"file":"timeSpan.js","sourceRoot":"","sources":["../../src/queryMetrics/timeSpan.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,sFAAsF;AACtF,cAAc;AACd,uCAAuC;AACvC,kCAAkC;AAClC,MAAM,mBAAmB,GAAG,KAAK,CAAC;AAClC,cAAc;AACd,MAAM,mBAAmB,GAAG,GAAG,GAAG,mBAAmB,CAAC;AAEtD,cAAc;AACd,MAAM,cAAc,GAAG,mBAAmB,GAAG,IAAI,CAAC,CAAC,aAAa;AAChE,cAAc;AACd,MAAM,cAAc,GAAG,GAAG,GAAG,cAAc,CAAC,CAAC,SAAS;AAEtD,cAAc;AACd,MAAM,cAAc,GAAG,cAAc,GAAG,EAAE,CAAC,CAAC,cAAc;AAC1D,cAAc;AACd,MAAM,cAAc,GAAG,GAAG,GAAG,cAAc,CAAC,CAAC,qBAAqB;AAElE,cAAc;AACd,MAAM,YAAY,GAAG,cAAc,GAAG,EAAE,CAAC,CAAC,iBAAiB;AAC3D,cAAc;AACd,MAAM,YAAY,GAAG,GAAG,GAAG,YAAY,CAAC,CAAC,0BAA0B;AAEnE,cAAc;AACd,MAAM,WAAW,GAAG,YAAY,GAAG,EAAE,CAAC,CAAC,kBAAkB;AACzD,cAAc;AACd,MAAM,WAAW,GAAG,GAAG,GAAG,WAAW,CAAC,CAAC,4BAA4B;AAEnE,cAAc;AACd,MAAM,eAAe,GAAG,IAAI,CAAC;AAC7B,cAAc;AACd,MAAM,eAAe,GAAG,eAAe,GAAG,EAAE,CAAC,CAAC,aAAa;AAC3D,cAAc;AACd,MAAM,aAAa,GAAG,eAAe,GAAG,EAAE,CAAC,CAAC,aAAa;AACzD,cAAc;AACd,MAAM,YAAY,GAAG,aAAa,GAAG,EAAE,CAAC,CAAC,aAAa;AAEtD,cAAc;AACd,MAAM,eAAe,GAAG,MAAM,CAAC,gBAAgB,GAAG,mBAAmB,CAAC;AACtE,cAAc;AACd,MAAM,eAAe,GAAG,MAAM,CAAC,gBAAgB,GAAG,mBAAmB,CAAC;AAEtE;;;;;;;;;;GAUG;AACH;IAAA,MAAa,QAAQ;QAGnB,YAAY,IAAY,EAAE,KAAa,EAAE,OAAe,EAAE,OAAe,EAAE,YAAoB;YAC7F,cAAc;YACd,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;gBAC3B,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC3C;YAED,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC5C;YAED,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;gBAC9B,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;aAC9C;YAED,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;gBAC9B,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;aAC9C;YAED,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE;gBACnC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACnD;YAED,MAAM,iBAAiB,GACrB,CAAC,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,GAAG,IAAI,GAAG,OAAO,GAAG,EAAE,GAAG,OAAO,CAAC,GAAG,IAAI,GAAG,YAAY,CAAC;YACnF,IAAI,iBAAiB,GAAG,eAAe,IAAI,iBAAiB,GAAG,eAAe,EAAE;gBAC9E,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;aACnF;YAED,IAAI,CAAC,MAAM,GAAG,iBAAiB,GAAG,mBAAmB,CAAC;QACxD,CAAC;QAED;;;;;WAKG;QACI,GAAG,CAAC,EAAY;YACrB,IAAI,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE;gBACzD,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;aAClE;YAED,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC;YACxC,OAAO,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC;QAED;;;;;WAKG;QACI,QAAQ,CAAC,EAAY;YAC1B,IAAI,QAAQ,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE;gBAC7D,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;aACxE;YAED,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC;YACxC,OAAO,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC;QAED;;;;;;WAMG;QACI,SAAS,CAAC,KAAe;YAC9B,IAAI,KAAK,IAAI,IAAI,EAAE;gBACjB,OAAO,CAAC,CAAC;aACV;YAED,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;gBAC/B,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;aACvD;YAED,OAAO,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACvC,CAAC;QAED;;;;WAIG;QACI,QAAQ;YACb,OAAO,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3E,CAAC;QAED;;;;;WAKG;QACI,MAAM,CAAC,KAAe;YAC3B,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;gBAC9B,OAAO,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC;aACrC;YAED,OAAO,KAAK,CAAC;QACf,CAAC;QAED;;;;;WAKG;QACI,MAAM;YACX,OAAO,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,CAAC;QAEM,IAAI;YACT,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,CAAC;QAC/C,CAAC;QAEM,KAAK;YACV,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC;QAChD,CAAC;QAEM,YAAY;YACjB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,mBAAmB,CAAC,CAAC;QACvD,CAAC;QAEM,OAAO;YACZ,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,CAAC;QAClD,CAAC;QAEM,KAAK;YACV,OAAO,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;QAEM,SAAS;YACd,OAAO,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC;QACnC,CAAC;QACM,UAAU;YACf,OAAO,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC;QACpC,CAAC;QAEM,iBAAiB;YACtB,OAAO,IAAI,CAAC,MAAM,GAAG,mBAAmB,CAAC;QAC3C,CAAC;QAEM,YAAY;YACjB,OAAO,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC;QACtC,CAAC;QAEM,YAAY;YACjB,OAAO,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC;QACtC,CAAC;QAEM,MAAM,CAAC,SAAS,CAAC,KAAa;YACnC,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7C,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC;YACxB,OAAO,QAAQ,CAAC;QAClB,CAAC;QAMM,MAAM,CAAC,UAAU,CAAC,QAAkB;YACzC,OAAO,QAAQ,CAAC,MAAM,CAAC;QACzB,CAAC;QAEM,MAAM,CAAC,oBAAoB,CAAC,CAAS,EAAE,CAAS;YACrD,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAChB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC;QAEM,MAAM,CAAC,wBAAwB,CAAC,CAAS,EAAE,CAAS;YACzD,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAChB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC;QAEM,MAAM,CAAC,OAAO,CAAC,EAAY,EAAE,EAAY;YAC9C,IAAI,EAAE,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,EAAE;gBACzB,OAAO,CAAC,CAAC;aACV;YACD,IAAI,EAAE,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,EAAE;gBACzB,OAAO,CAAC,CAAC,CAAC;aACX;YACD,OAAO,CAAC,CAAC;QACX,CAAC;QAEM,MAAM,CAAC,QAAQ,CAAC,KAAa,EAAE,KAAa;YACjD,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC3C;YAED,MAAM,YAAY,GAAG,KAAK,GAAG,KAAK,CAAC;YACnC,IAAI,YAAY,GAAG,eAAe,IAAI,YAAY,GAAG,eAAe,EAAE;gBACpE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;aACtC;YAED,OAAO,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,mBAAmB,CAAC,CAAC,CAAC;QAC5E,CAAC;QAEM,MAAM,CAAC,gBAAgB,CAAC,KAAa;YAC1C,OAAO,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACrC,CAAC;QAEM,MAAM,CAAC,WAAW,CAAC,KAAa;YACrC,OAAO,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;QACnD,CAAC;QAEM,MAAM,CAAC,WAAW,CAAC,KAAa;YACrC,OAAO,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;QACnD,CAAC;QAEM,MAAM,CAAC,SAAS,CAAC,KAAa;YACnC,OAAO,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;QACjD,CAAC;QAEM,MAAM,CAAC,QAAQ,CAAC,KAAa;YAClC,OAAO,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QAChD,CAAC;;IA3DsB,aAAI,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACnC,iBAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IACvD,iBAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IA0DhF,eAAC;KAAA;SA7NY,QAAQ","sourcesContent":["// Ported this implementation to javascript:\n// https://referencesource.microsoft.com/#mscorlib/system/timespan.cs,83e476c1ae112117\n/** @hidden */\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst ticksPerMillisecond = 10000;\n/** @hidden */\nconst millisecondsPerTick = 1.0 / ticksPerMillisecond;\n\n/** @hidden */\nconst ticksPerSecond = ticksPerMillisecond * 1000; // 10,000,000\n/** @hidden */\nconst secondsPerTick = 1.0 / ticksPerSecond; // 0.0001\n\n/** @hidden */\nconst ticksPerMinute = ticksPerSecond * 60; // 600,000,000\n/** @hidden */\nconst minutesPerTick = 1.0 / ticksPerMinute; // 1.6666666666667e-9\n\n/** @hidden */\nconst ticksPerHour = ticksPerMinute * 60; // 36,000,000,000\n/** @hidden */\nconst hoursPerTick = 1.0 / ticksPerHour; // 2.77777777777777778e-11\n\n/** @hidden */\nconst ticksPerDay = ticksPerHour * 24; // 864,000,000,000\n/** @hidden */\nconst daysPerTick = 1.0 / ticksPerDay; // 1.1574074074074074074e-12\n\n/** @hidden */\nconst millisPerSecond = 1000;\n/** @hidden */\nconst millisPerMinute = millisPerSecond * 60; //     60,000\n/** @hidden */\nconst millisPerHour = millisPerMinute * 60; //  3,600,000\n/** @hidden */\nconst millisPerDay = millisPerHour * 24; // 86,400,000\n\n/** @hidden */\nconst maxMilliSeconds = Number.MAX_SAFE_INTEGER / ticksPerMillisecond;\n/** @hidden */\nconst minMilliSeconds = Number.MIN_SAFE_INTEGER / ticksPerMillisecond;\n\n/**\n * Represents a time interval.\n *\n * @constructor TimeSpan\n * @param {number} days                 - Number of days.\n * @param {number} hours                - Number of hours.\n * @param {number} minutes              - Number of minutes.\n * @param {number} seconds              - Number of seconds.\n * @param {number} milliseconds         - Number of milliseconds.\n * @ignore\n */\nexport class TimeSpan {\n  // tslint:disable-next-line:variable-name\n  protected _ticks: number;\n  constructor(days: number, hours: number, minutes: number, seconds: number, milliseconds: number) {\n    // Constructor\n    if (!Number.isInteger(days)) {\n      throw new Error(\"days is not an integer\");\n    }\n\n    if (!Number.isInteger(hours)) {\n      throw new Error(\"hours is not an integer\");\n    }\n\n    if (!Number.isInteger(minutes)) {\n      throw new Error(\"minutes is not an integer\");\n    }\n\n    if (!Number.isInteger(seconds)) {\n      throw new Error(\"seconds is not an integer\");\n    }\n\n    if (!Number.isInteger(milliseconds)) {\n      throw new Error(\"milliseconds is not an integer\");\n    }\n\n    const totalMilliSeconds =\n      (days * 3600 * 24 + hours * 3600 + minutes * 60 + seconds) * 1000 + milliseconds;\n    if (totalMilliSeconds > maxMilliSeconds || totalMilliSeconds < minMilliSeconds) {\n      throw new Error(\"Total number of milliseconds was either too large or too small\");\n    }\n\n    this._ticks = totalMilliSeconds * ticksPerMillisecond;\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the sum of the specified TimeSpan object and this instance.\n   * @param {TimeSpan} ts              - The time interval to add.\n   * @memberof TimeSpan\n   * @instance\n   */\n  public add(ts: TimeSpan) {\n    if (TimeSpan.additionDoesOverflow(this._ticks, ts._ticks)) {\n      throw new Error(\"Adding the two timestamps causes an overflow.\");\n    }\n\n    const results = this._ticks + ts._ticks;\n    return TimeSpan.fromTicks(results);\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the difference of the specified TimeSpan object and this instance.\n   * @param {TimeSpan} ts              - The time interval to subtract.\n   * @memberof TimeSpan\n   * @instance\n   */\n  public subtract(ts: TimeSpan) {\n    if (TimeSpan.subtractionDoesUnderflow(this._ticks, ts._ticks)) {\n      throw new Error(\"Subtracting the two timestamps causes an underflow.\");\n    }\n\n    const results = this._ticks - ts._ticks;\n    return TimeSpan.fromTicks(results);\n  }\n\n  /**\n   * Compares this instance to a specified object and returns an integer that indicates whether this\n   * instance is shorter than, equal to, or longer than the specified object.\n   * @param {TimeSpan} value              - The time interval to add.\n   * @memberof TimeSpan\n   * @instance\n   */\n  public compareTo(value: TimeSpan) {\n    if (value == null) {\n      return 1;\n    }\n\n    if (!TimeSpan.isTimeSpan(value)) {\n      throw new Error(\"Argument must be a TimeSpan object\");\n    }\n\n    return TimeSpan.compare(this, value);\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the absolute value of the current TimeSpan object.\n   * @memberof TimeSpan\n   * @instance\n   */\n  public duration() {\n    return TimeSpan.fromTicks(this._ticks >= 0 ? this._ticks : -this._ticks);\n  }\n\n  /**\n   * Returns a value indicating whether this instance is equal to a specified object.\n   * @memberof TimeSpan\n   * @param {TimeSpan} value              - The time interval to check for equality.\n   * @instance\n   */\n  public equals(value: TimeSpan) {\n    if (TimeSpan.isTimeSpan(value)) {\n      return this._ticks === value._ticks;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the negated value of this instance.\n   * @memberof TimeSpan\n   * @param {TimeSpan} value              - The time interval to check for equality.\n   * @instance\n   */\n  public negate() {\n    return TimeSpan.fromTicks(-this._ticks);\n  }\n\n  public days() {\n    return Math.floor(this._ticks / ticksPerDay);\n  }\n\n  public hours() {\n    return Math.floor(this._ticks / ticksPerHour);\n  }\n\n  public milliseconds() {\n    return Math.floor(this._ticks / ticksPerMillisecond);\n  }\n\n  public seconds() {\n    return Math.floor(this._ticks / ticksPerSecond);\n  }\n\n  public ticks() {\n    return this._ticks;\n  }\n\n  public totalDays() {\n    return this._ticks * daysPerTick;\n  }\n  public totalHours() {\n    return this._ticks * hoursPerTick;\n  }\n\n  public totalMilliseconds() {\n    return this._ticks * millisecondsPerTick;\n  }\n\n  public totalMinutes() {\n    return this._ticks * minutesPerTick;\n  }\n\n  public totalSeconds() {\n    return this._ticks * secondsPerTick;\n  }\n\n  public static fromTicks(value: number) {\n    const timeSpan = new TimeSpan(0, 0, 0, 0, 0);\n    timeSpan._ticks = value;\n    return timeSpan;\n  }\n\n  public static readonly zero = new TimeSpan(0, 0, 0, 0, 0);\n  public static readonly maxValue = TimeSpan.fromTicks(Number.MAX_SAFE_INTEGER);\n  public static readonly minValue = TimeSpan.fromTicks(Number.MIN_SAFE_INTEGER);\n\n  public static isTimeSpan(timespan: TimeSpan) {\n    return timespan._ticks;\n  }\n\n  public static additionDoesOverflow(a: number, b: number) {\n    const c = a + b;\n    return a !== c - b || b !== c - a;\n  }\n\n  public static subtractionDoesUnderflow(a: number, b: number) {\n    const c = a - b;\n    return a !== c + b || b !== a - c;\n  }\n\n  public static compare(t1: TimeSpan, t2: TimeSpan) {\n    if (t1._ticks > t2._ticks) {\n      return 1;\n    }\n    if (t1._ticks < t2._ticks) {\n      return -1;\n    }\n    return 0;\n  }\n\n  public static interval(value: number, scale: number) {\n    if (isNaN(value)) {\n      throw new Error(\"value must be a number\");\n    }\n\n    const milliseconds = value * scale;\n    if (milliseconds > maxMilliSeconds || milliseconds < minMilliSeconds) {\n      throw new Error(\"timespan too long\");\n    }\n\n    return TimeSpan.fromTicks(Math.floor(milliseconds * ticksPerMillisecond));\n  }\n\n  public static fromMilliseconds(value: number) {\n    return TimeSpan.interval(value, 1);\n  }\n\n  public static fromSeconds(value: number) {\n    return TimeSpan.interval(value, millisPerSecond);\n  }\n\n  public static fromMinutes(value: number) {\n    return TimeSpan.interval(value, millisPerMinute);\n  }\n\n  public static fromHours(value: number) {\n    return TimeSpan.interval(value, millisPerHour);\n  }\n\n  public static fromDays(value: number) {\n    return TimeSpan.interval(value, millisPerDay);\n  }\n}\n"]}
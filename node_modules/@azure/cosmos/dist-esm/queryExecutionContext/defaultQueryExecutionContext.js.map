{"version":3,"file":"defaultQueryExecutionContext.js","sourceRoot":"","sources":["../../src/queryExecutionContext/defaultQueryExecutionContext.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"../common\";\nimport { logger } from \"../common/logger\";\nimport { ClientSideMetrics, QueryMetrics } from \"../queryMetrics\";\nimport { FeedOptions, Response } from \"../request\";\nimport { getInitialHeader } from \"./headerUtils\";\nimport { ExecutionContext } from \"./index\";\n\n/** @hidden */\nconst log = logger(\"defaultQueryExecutionContext\");\n\n/** @hidden */\nexport type FetchFunctionCallback = (options: FeedOptions) => Promise<Response<any>>;\n\n/** @hidden */\nenum STATES {\n  start = \"start\",\n  inProgress = \"inProgress\",\n  ended = \"ended\"\n}\n\n/** @hidden */\nexport class DefaultQueryExecutionContext implements ExecutionContext {\n  private static readonly STATES = STATES;\n  private resources: any[]; // TODO: any resources\n  private currentIndex: number;\n  private currentPartitionIndex: number;\n  private fetchFunctions: FetchFunctionCallback[];\n  private options: FeedOptions; // TODO: any options\n  public continuationToken: string; // TODO: any continuation\n  public get continuation() {\n    return this.continuationToken;\n  }\n  private state: STATES;\n  private nextFetchFunction: Promise<Response<any>>;\n  /**\n   * Provides the basic Query Execution Context.\n   * This wraps the internal logic query execution using provided fetch functions\n   * @constructor DefaultQueryExecutionContext\n   * @param {ClientContext} clientContext          - Is used to read the partitionKeyRanges for split proofing\n   * @param {SqlQuerySpec | string} query          - A SQL query.\n   * @param {FeedOptions} [options]                - Represents the feed options.\n   * @param {callback | callback[]} fetchFunctions - A function to retrieve each page of data.\n   *                          An array of functions may be used to query more than one partition.\n   * @ignore\n   */\n  constructor(options: any, fetchFunctions: FetchFunctionCallback | FetchFunctionCallback[]) {\n    // TODO: any options\n    this.resources = [];\n    this.currentIndex = 0;\n    this.currentPartitionIndex = 0;\n    this.fetchFunctions = Array.isArray(fetchFunctions) ? fetchFunctions : [fetchFunctions];\n    this.options = options || {};\n    this.continuationToken = this.options.continuationToken || this.options.continuation || null;\n    this.state = DefaultQueryExecutionContext.STATES.start;\n  }\n\n  /**\n   * Execute a provided callback on the next element in the execution context.\n   * @memberof DefaultQueryExecutionContext\n   * @instance\n   */\n  public async nextItem(): Promise<Response<any>> {\n    ++this.currentIndex;\n    const response = await this.current();\n    return response;\n  }\n\n  /**\n   * Retrieve the current element on the execution context.\n   * @memberof DefaultQueryExecutionContext\n   * @instance\n   */\n  public async current(): Promise<Response<any>> {\n    if (this.currentIndex < this.resources.length) {\n      return {\n        result: this.resources[this.currentIndex],\n        headers: getInitialHeader()\n      };\n    }\n\n    if (this._canFetchMore()) {\n      const { result: resources, headers } = await this.fetchMore();\n      this.resources = resources;\n      if (this.resources.length === 0) {\n        if (!this.continuationToken && this.currentPartitionIndex >= this.fetchFunctions.length) {\n          this.state = DefaultQueryExecutionContext.STATES.ended;\n          return { result: undefined, headers };\n        } else {\n          return this.current();\n        }\n      }\n      return { result: this.resources[this.currentIndex], headers };\n    } else {\n      this.state = DefaultQueryExecutionContext.STATES.ended;\n      return { result: undefined, headers: getInitialHeader() };\n    }\n  }\n\n  /**\n   * Determine if there are still remaining resources to processs based on\n   * the value of the continuation token or the elements remaining on the current batch in the execution context.\n   * @memberof DefaultQueryExecutionContext\n   * @instance\n   * @returns {Boolean} true if there is other elements to process in the DefaultQueryExecutionContext.\n   */\n  public hasMoreResults() {\n    return (\n      this.state === DefaultQueryExecutionContext.STATES.start ||\n      this.continuationToken !== undefined ||\n      this.currentIndex < this.resources.length - 1 ||\n      this.currentPartitionIndex < this.fetchFunctions.length\n    );\n  }\n\n  /**\n   * Fetches the next batch of the feed and pass them as an array to a callback\n   * @memberof DefaultQueryExecutionContext\n   * @instance\n   */\n  /**\n   * Fetches the next batch of the feed and pass them as an array to a callback\n   * @memberof DefaultQueryExecutionContext\n   * @instance\n   */\n  public async fetchMore(): Promise<Response<any>> {\n    if (this.currentPartitionIndex >= this.fetchFunctions.length) {\n      return { headers: getInitialHeader(), result: undefined };\n    }\n\n    // Keep to the original continuation and to restore the value after fetchFunction call\n    const originalContinuation = this.options.continuationToken || this.options.continuation;\n    this.options.continuationToken = this.continuationToken;\n\n    // Return undefined if there is no more results\n    if (this.currentPartitionIndex >= this.fetchFunctions.length) {\n      return { headers: getInitialHeader(), result: undefined };\n    }\n\n    let resources;\n    let responseHeaders;\n    try {\n      let p: Promise<Response<any>>;\n      if (this.nextFetchFunction !== undefined) {\n        log.debug(\"using prefetch\");\n        p = this.nextFetchFunction;\n        this.nextFetchFunction = undefined;\n      } else {\n        log.debug(\"using fresh fetch\");\n        p = this.fetchFunctions[this.currentPartitionIndex](this.options);\n      }\n      const response = await p;\n      resources = response.result;\n      responseHeaders = response.headers;\n\n      this.continuationToken = responseHeaders[Constants.HttpHeaders.Continuation];\n      if (!this.continuationToken) {\n        ++this.currentPartitionIndex;\n      }\n\n      if (this.options && this.options.bufferItems === true) {\n        const fetchFunction = this.fetchFunctions[this.currentPartitionIndex];\n        this.nextFetchFunction = fetchFunction\n          ? fetchFunction({ ...this.options, continuationToken: this.continuationToken })\n          : undefined;\n      }\n    } catch (err) {\n      this.state = DefaultQueryExecutionContext.STATES.ended;\n      // return callback(err, undefined, responseHeaders);\n      // TODO: Error and data being returned is an antipattern, this might broken\n      throw err;\n    }\n\n    this.state = DefaultQueryExecutionContext.STATES.inProgress;\n    this.currentIndex = 0;\n    this.options.continuationToken = originalContinuation;\n    this.options.continuation = originalContinuation;\n\n    // deserializing query metrics so that we aren't working with delimited strings in the rest of the code base\n    if (Constants.HttpHeaders.QueryMetrics in responseHeaders) {\n      const delimitedString = responseHeaders[Constants.HttpHeaders.QueryMetrics];\n      let queryMetrics = QueryMetrics.createFromDelimitedString(delimitedString);\n\n      // Add the request charge to the query metrics so that we can have per partition request charge.\n      if (Constants.HttpHeaders.RequestCharge in responseHeaders) {\n        const requestCharge = Number(responseHeaders[Constants.HttpHeaders.RequestCharge]) || 0;\n        queryMetrics = new QueryMetrics(\n          queryMetrics.retrievedDocumentCount,\n          queryMetrics.retrievedDocumentSize,\n          queryMetrics.outputDocumentCount,\n          queryMetrics.outputDocumentSize,\n          queryMetrics.indexHitDocumentCount,\n          queryMetrics.totalQueryExecutionTime,\n          queryMetrics.queryPreparationTimes,\n          queryMetrics.indexLookupTime,\n          queryMetrics.documentLoadTime,\n          queryMetrics.vmExecutionTime,\n          queryMetrics.runtimeExecutionTimes,\n          queryMetrics.documentWriteTime,\n          new ClientSideMetrics(requestCharge)\n        );\n      }\n\n      // Wraping query metrics in a object where the key is '0' just so single partition\n      // and partition queries have the same response schema\n      responseHeaders[Constants.HttpHeaders.QueryMetrics] = {};\n      responseHeaders[Constants.HttpHeaders.QueryMetrics][\"0\"] = queryMetrics;\n    }\n\n    return { result: resources, headers: responseHeaders };\n  }\n\n  private _canFetchMore() {\n    const res =\n      this.state === DefaultQueryExecutionContext.STATES.start ||\n      (this.continuationToken && this.state === DefaultQueryExecutionContext.STATES.inProgress) ||\n      (this.currentPartitionIndex < this.fetchFunctions.length &&\n        this.state === DefaultQueryExecutionContext.STATES.inProgress);\n    return res;\n  }\n}\n"]}